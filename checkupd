import requests
import os
import time
import pyautogui
import zipfile
from time import sleep
import subprocess
import requests
import discord_webhook
import json
import wget
from pathlib import Path
from zipfile import ZipFile

newver = "C:\\Users\\Dang\\Desktop\\UpdatedVer208"
verspmainreal = "C:\\checkupdate\\Updated151"
autoexec1 = "C:\\checkupdate\\UpdateAutoexec7"
autoexec2 = "C:\\checkupdate\\UpdateAutoexec4"
updatekillfail = "C:\\Users\\Dang\\Desktop\\KillFail\\DaUpdate"
updateconfigmousekey = "C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\Automatic Mouse and Keyboard\\UpdateConfigMouse"
cuttay_check = "C:\\Users\\Dang\\Desktop\\updatedcuttay"
checktab_ktra = "C:\\checkupdate\\donechecktab"
# updatefluxus = "C:\\Users\\Dang\\Desktop\\Fluxus\\Fluxus\\Fluxus\\Updated"
scriptmousekey = "C:\\Users\\Dang\\Documents\\Automatic Mouse and Keyboard\\Scripts\\Updated2"
# robot_ver = "C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\Automatic Mouse and Keyboard\\Updated3"
# robot_ver1 = "C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\Automatic Mouse and Keyboard\\Updated4"
checklogin = "C:\\Users\\Dang\\Desktop\\login\\Updated"
checksetroblox_killfail = "C:\\Users\\Dang\\Desktop\\KillFail\\Updated141"
checkstartup = "C:\\Users\\Dang\\Desktop\\staUpdated141"
checkgsclick = "C:\\Users\\Dang\\Documents\\Updated141"
checknewlogin = "C:\\Users\\Dang\\Desktop\\logUpdated141"
checkmousekey = "C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\Updated"

if (not os.path.exists("C:\\Users\\Dang\\Desktop\\KillFail")):
    os.mkdir("C:\\Users\\Dang\\Desktop\\KillFail")
    print ("Created KillFail")
    
if (not os.path.exists("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2")):
    os.mkdir("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2")
    print ("Created AutoMouseKey 5.2.9.2")
    
if (not os.path.exists("C:\\Users\\Dang\\Documents\\Automatic Mouse and Keyboard")):
    os.mkdir("C:\\Users\\Dang\\Documents\\Automatic Mouse and Keyboard")
    print ("Created Automatic Mouse and Keyboard")
if (not os.path.exists("C:\\Users\\Dang\\Documents\\Automatic Mouse and Keyboard\\Scripts")):
    os.mkdir("C:\\Users\\Dang\\Documents\\Automatic Mouse and Keyboard\\Scripts")

if (not os.path.exists("C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft")):
    os.mkdir("C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft")
    print ("Created RobotSoft")
if (not os.path.exists("C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\Automatic Mouse and Keyboard")):
    os.mkdir("C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\Automatic Mouse and Keyboard")
    print ("Created RobotSoft 1")
if (not os.path.exists("C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\MouseClicker")):
    os.mkdir("C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\MouseClicker")
    print ("Created RobotSoft 2")

def setupclick1():
    filename = Path('AutoHotkey.exe')
    url = 'https://www.mediafire.com/file_premium/ur7tq9uvh13bekh/AutoHotkey.exe/file'
    response = requests.get(url)
    filename.write_bytes(response.content)
    print ("Downloaded AutoHotkey.exe")   
def setupclick2():
    filename = Path('AutoMouseKey.exe')
    url = 'https://www.mediafire.com/file_premium/1nf1zsfh9qjetks/AutoMouseKey.exe/file'
    response = requests.get(url)
    filename.write_bytes(response.content)   
    print ("Downloaded AutoMouseKey.exe")  
def setupclick3():
    filename = Path('KeyPresser.exe')
    url = 'https://www.mediafire.com/file_premium/soboaih1289dec2/KeyPresser.exe/file'
    response = requests.get(url)
    filename.write_bytes(response.content)  
    print ("Downloaded KeyPresser.exe")   
def setupclick4():
    filename = Path('MouseClicker.exe')
    url = 'https://www.mediafire.com/file_premium/reqfjsfmh9egrr4/MouseClicker.exe/file'
    response = requests.get(url)
    filename.write_bytes(response.content)  
    print ("Downloaded MouseClicker.exe")  
def setupclick5():
    filename = Path('Read Me!!!.txt')
    url = 'https://www.mediafire.com/file_premium/3j8tbhebu540yz9/Read_Me%2521%2521%2521.txt/file'
    response = requests.get(url)
    filename.write_bytes(response.content)   
    print ("Downloaded Read Me!!!.txt")  
def setupclick6():
    filename = Path('ScheduledTasks.exe')
    url = 'https://www.mediafire.com/file_premium/qeb8xs9h28uy481/ScheduledTasks.exe/file'
    response = requests.get(url)
    filename.write_bytes(response.content)   
    print ("Downloaded ScheduledTasks.exe")  
    
def script():
    filename = Path('login.amk')
    url = 'https://dangtapcode.xyz/luutru/login.amk'
    response = requests.get(url)
    filename.write_bytes(response.content)   
    print ("Downloaded login.amk")  

def script2():
    if os.path.exists("C:\\Users\\Dang\\Documents\\Automatic Mouse and Keyboard\\Scripts\\good.amk"):
        os.remove("C:\\Users\\Dang\\Documents\\Automatic Mouse and Keyboard\\Scripts\\good.amk")
        print ("Removed good.amk")
    if not os.path.exists(scriptmousekey):
        os.mkdir(scriptmousekey)
        print ("Created Folder Update")
    filename = Path('good.amk')
    url = 'https://dangtapcode.xyz/luutru/good.amk'
    response = requests.get(url)
    filename.write_bytes(response.content)   
    print ("Downloaded good.amk")  
    
def clickconfig1():
    if os.path.exists("C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\Automatic Mouse and Keyboard\\amk.ini"):
        os.remove("C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\Automatic Mouse and Keyboard\\amk.ini")
        print ("Removed amk.ini")
        os.mkdir(robot_ver)
        print ("Created Folder Update")
    filename = Path('amk.ini')
    url = 'https://www.mediafire.com/file_premium/ur51cqium32w5lu/amk.ini/file'
    response = requests.get(url)
    filename.write_bytes(response.content)  
    print ("Downloaded amk.ini")   
def clickconfig2():
    if os.path.exists("C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\Automatic Mouse and Keyboard\\PlayOptions.ini"):
        os.remove("C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\Automatic Mouse and Keyboard\\PlayOptions.ini")
        print ("PlayOptions.ini")
        os.mkdir(robot_ver1) 
        print ("Created Folder Update")
    filename = Path('PlayOptions.ini')
    url = 'https://dangtapcode.xyz/luutru/PlayOptions.ini'
    response = requests.get(url)
    filename.write_bytes(response.content) 
    print ("Downloaded PlayOptions.ini")  
def clickconfig3():
    filename = Path('TaskLog.txt')
    url = 'https://www.mediafire.com/file_premium/0t123im6nfl0czq/TaskLog.txt/file'
    response = requests.get(url)
    filename.write_bytes(response.content)   
    print ("Downloaded TaskLog.txt")
def start():
    filename = Path('startlogin.bat')
    url = 'https://dangtapcode.xyz/luutru/startlogin.bat'
    response = requests.get(url)
    filename.write_bytes(response.content)   
    print ("Downloaded startlogin.bat")

def login():
    if os.path.exists("C:\\Users\\Dang\\Desktop\\login\\login.exe"):
         os.remove("C:\\Users\\Dang\\Desktop\\login\\login.exe")
         print("File removed successfully")
    if not os.path.exists("C:\\Users\\Dang\\Desktop\\login"):
         os.mkdir("C:\\Users\\Dang\\Desktop\\login")  
         print("Created login successfully")    
         os.mkdir(checklogin)   
    filename = Path('login.exe')
    url = 'https://www.mediafire.com/file_premium/s31dog65bvq6w5w/login.exe/file'
    response = requests.get(url)
    filename.write_bytes(response.content)
    print ("Downloaded login.exe")
    
def keyboard():
    if os.path.exists("C:\\Users\\Dang\\Desktop\\keyboard.exe"):
         os.remove("C:\\Users\\Dang\\Desktop\\keyboard.exe")
         print("Removed keyboard.exe")
    filename = Path('keyboard.exe')
    url = 'https://dangtapcode.xyz/luutru/keyboard.exe'
    response = requests.get(url)
    filename.write_bytes(response.content)  
    print ("Downloaded keyboard.exe")
    if not os.path.exists("C:\\Users\\Dang\\Desktop\\Keyboard"): 
     os.mkdir("C:\\Users\\Dang\\Desktop\\Keyboard") 
     print ("Created Keyboard")
    
def spmain():
    filename = Path('startupdatemain.bat')
    url = 'https://www.mediafire.com/file_premium/ccctkcj0nts9nil/startupdatemain.bat/file'
    response = requests.get(url)
    filename.write_bytes(response.content)  
    print ("Downloaded startupdatemain.bat") 
        
def spmainreal():
    if os.path.exists("C:\\checkupdate\\updatemain.exe"):
       os.remove("C:\\checkupdate\\updatemain.exe")
    filename = Path('updatemain.exe')
    url = 'https://dangtapcode.xyz/luutru/updatemain.exe'
    response = requests.get(url)
    filename.write_bytes(response.content)
    print ("Downloaded updatemain.exe")
    if not os.path.exists(verspmainreal): 
     os.mkdir(verspmainreal)
     print ("Created Folder Update")
    os.system('"C:\\checkupdate\\startupdatemain.bat"')  
    print ("Opening startupdatemain.bat")
    
def setroblox():
    if os.path.exists("C:\\Users\\Dang\\Desktop\\KillFail\\setroblox.exe"):
         os.remove("C:\\Users\\Dang\\Desktop\\KillFail\\setroblox.exe")
         print ("Removded setroblox.exe")
    filename = Path('setroblox.exe')
    url = 'https://www.mediafire.com/file_premium/uwwmncj1hxqdqsg/setroblox.exe/file'
    response = requests.get(url)
    filename.write_bytes(response.content) 
    print ("Downloaded setroblox.exe")
    if not os.path.exists(checksetroblox_killfail):
     os.mkdir(checksetroblox_killfail)  
     print ("Created Folder Update")
    
def fetch_zip_file():
    try:
        response = requests.get("https://dangtapcode.xyz/luutru/Startup.zip")
    except OSError:
        print('No connection to the server!')
        return None
    if response.status_code == 200:
        print('Status 200, OK')
        print ("Downloading")
        open('Startup.zip', 'wb').write(response.content)
        print ("Downloaded")
        time.sleep(3)
    else:
        print('ZIP file request not successful!.')
        return None
def main():
    fetch_zip_file()
    print ("Unziping")
    with zipfile.ZipFile('Startup.zip', 'r') as zip_ref:
        zip_ref.extractall("C:\\Users\\Dang\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup")
    print ("Unziped")
    
def startup():
    time.sleep(1)
    main()
    if not os.path.exists(checkstartup):
     os.mkdir(checkstartup)  
     print ("Created Folder Update")

def fetch_zip_file1():
    try:
        response = requests.get("https://dangtapcode.xyz/luutru/AutoMouseKey 5.2.9.2.zip")
    except OSError:
        print('No connection to the server!')
        return None
    if response.status_code == 200:
        print('Status 200, OK')
        print ("Downloading")
        open('AutoMouseKey 5.2.9.2.zip', 'wb').write(response.content)
        print ("Downloaded")
        time.sleep(3)
    else:
        print('ZIP file request not successful!.')
        return None
def main2():
    fetch_zip_file1()
    print ("Unziping")
    with zipfile.ZipFile('AutoMouseKey 5.2.9.2.zip', 'r') as zip_ref:
        zip_ref.extractall("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2")
    print ("Unziped")
 
def mousekey():  
    time.sleep(1)
    main2()
    if not os.path.exists(checkmousekey):
     os.mkdir(checkmousekey)  
     print ("Created Folder Update")

def fetch_zip_file3():
    try:
        response = requests.get("https://dangtapcode.xyz/luutru/AutomaticSolution_Software.zip")
    except OSError:
        print('No connection to the server!')
        return None
    if response.status_code == 200:
        print('Status 200, OK')
        print ("Downloading")
        open('AutomaticSolution_Software.zip', 'wb').write(response.content)
        print ("Downloaded")
        time.sleep(3)
    else:
        print('ZIP file request not successful!.')
        return None
def main3():
    fetch_zip_file3()
    print ("Unziping")
    with zipfile.ZipFile('AutomaticSolution_Software.zip', 'r') as zip_ref:
        zip_ref.extractall("C:\\Users\\Dang\\Documents\\AutomaticSolution Software")
    print ("Unziped")
 
def gsclick():  
    time.sleep(1)
    main3()
    if not os.path.exists(checkgsclick):
     os.mkdir(checkgsclick)  
     print ("Created Folder Update")
          
def fetch_zip_file4():
    try:
        response = requests.get("https://dangtapcode.xyz/luutru/login.zip")
    except OSError:
        print('No connection to the server!')
        return None
    if response.status_code == 200:
        print('Status 200, OK')
        print ("Downloading")
        open('login.zip', 'wb').write(response.content)
        print ("Downloaded")
        time.sleep(3)
    else:
        print('ZIP file request not successful!.')
        return None
def main4():
    fetch_zip_file4()
    print ("Unziping")
    with zipfile.ZipFile('login.zip', 'r') as zip_ref:
        zip_ref.extractall("C:\\Users\\Dang\\Desktop\\login")
    print ("Unziped")

def newlogin():  
    time.sleep(1)
    main4()
    if not os.path.exists(checknewlogin):
     os.mkdir(checknewlogin)  
     print ("Created Folder Update")

def zipfile1():
    try:
         try:
             print("link 1")
             response = requests.get("https://drive.google.com/uc?id=1MUjCXHg12X63SJrLY4hI-PXWOUOEPXWi&export=download&confirm=t&uuid=f3a84f84-42b1-4a9d-a2c4-fd11eb2975d7")
         except:
             print ("link 2")
             response = requests.get("https://drive.google.com/uc?id=13zGRkFNUop8tk7tlz3pRJxcmC4dfGwvi&export=download&confirm=t&uuid=13f73353-dbdb-4c8f-bd12-115c872378e6")
    except OSError:
        print('No connection to the server!')
        return None
    if response.status_code == 200:
        print('Status 200, OK')
        print ("Downloading")
        open('KillFail.zip', 'wb').write(response.content)
        print ("Downloaded")
        time.sleep(3)
    else:
        print('ZIP file request not successful!.')
        return None
def downzipfile1():
    zipfile1()
    print ("Unziping")
    with zipfile.ZipFile('KillFail.zip', 'r') as zip_ref:
        zip_ref.extractall("C:\\Users\\Dang\\Desktop\\KillFail")
    print ("Unziped")

def fulltdownkillfail():  
    time.sleep(1)
    downzipfile1()
    if not os.path.exists(updatekillfail):
     os.mkdir(updatekillfail)  
     print ("Created Folder Update")     

def zipfile2():
    try:
         try:
             print("link 1")
             response = requests.get("https://dangtapcode.xyz/luutru/robotraicay.zip")
         except:
             print ("link 2")
             response = requests.get("https://drive.google.com/uc?id=199hu1gKQXDLV93pUqsCDH9vr1VlT-V2e&export=download")
    except OSError:
        print('No connection to the server!')
        return None
    if response.status_code == 200:
        print('Status 200, OK')
        print ("Downloading")
        open('robotraicay.zip', 'wb').write(response.content)
        print ("Downloaded")
        time.sleep(3)
    else:
        print('ZIP file request not successful!.')
        return None
def downzipfile2():
    zipfile2()
    print ("Unziping")
    with zipfile.ZipFile('robotraicay.zip', 'r') as zip_ref:
        zip_ref.extractall("C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\Automatic Mouse and Keyboard")
    print ("Unziped")

def fulldownconfigmouse():  
    time.sleep(1)
    downzipfile2()
    if not os.path.exists(updateconfigmousekey):
     os.mkdir(updateconfigmousekey)  
     print ("Created Folder Update")   

def fluxus():
    print ("Detected updatefluxus is not available")
    if not os.path.exists("C:\\Users\\Dang\\Desktop\\updatefluxus.exe"):
        filename = Path('updatefluxus.exe')
        url = 'https://dangtapcode.xyz/luutru/updatefluxus.exe'
        response = requests.get(url)
        filename.write_bytes(response.content)  
        print ("Downloaded updatefluxus.exe")   
    elif os.path.exists("C:\\Users\\Dang\\Desktop\\updatefluxus.exe"):
        os.remove("C:\\Users\\Dang\\Desktop\\updatefluxus.exe")
        filename = Path('updatefluxus.exe')
        url = 'https://dangtapcode.xyz/luutru/updatefluxus.exe'
        response = requests.get(url)
        filename.write_bytes(response.content)  
        print ("Downloaded updatefluxus.exe")              
        

def zipfile5():
    try:
         try:
             print("link 1")
             response = requests.get("https://dangtapcode.xyz/luutru/CutTay.zip")
         except:
             print ("link 2")
             response = requests.get("")
    except OSError:
        print('No connection to the server!')
        return None
    if response.status_code == 200:
        print('Status 200, OK')
        print ("Downloading")
        open('CutTay.zip', 'wb').write(response.content)
        print ("Downloaded")
        time.sleep(3)
    else:
        print('ZIP file request not successful!.')
        return None
def downzipfile5():
    zipfile5()
    print ("Unziping")
    with zipfile.ZipFile('CutTay.zip', 'r') as zip_ref:
        zip_ref.extractall("C:\\Users\\Dang\\Desktop\\CutTay")
    print ("Unziped")

def fulldowncuttay():  
    time.sleep(1)
    downzipfile5()
    if not os.path.exists(cuttay_check):
     os.mkdir(cuttay_check)  
     print ("Created Folder Update")

def zipfile6():
    try:
         try:
             print("link 1")
             response = requests.get("https://dangtapcode.xyz/luutru/checktab.zip")
         except:
             print ("link 2")
             response = requests.get("")
    except OSError:
        print('No connection to the server!')
        return None
    if response.status_code == 200:
        print('Status 200, OK')
        print ("Downloading")
        open('checktab.zip', 'wb').write(response.content)
        print ("Downloaded")
        time.sleep(3)
    else:
        print('ZIP file request not successful!.')
        return None
def downzipfile6():
    zipfile6()
    print ("Unziping")
    with zipfile.ZipFile('checktab.zip', 'r') as zip_ref:
        zip_ref.extractall("C:\\Users\\Dang\\Desktop\\checktab")
    print ("Unziped")

def fulldownchecktab():  
    time.sleep(1)
    downzipfile6()
    if not os.path.exists(checktab_ktra):
     os.mkdir(checktab_ktra)  
     print ("Created Folder Update")
          
def downautoexec1():
    try:
        if os.path.exists(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec'):
            os.removedirs(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec')
        if os.path.exists(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\maru.txt'):
            os.remove(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\maru.txt')
        if os.path.exists(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\maru.lua'):
            os.remove(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\maru.lua')
        if os.path.exists(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\New Text Document.txt'):
            os.remove(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\New Text Document.txt')
        if os.path.exists(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\scriptne1.lua'):
            os.remove(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\scriptne1.lua')
        if os.path.exists(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\scriptne2.lua'):
            os.remove(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\scriptne2.lua')
        if os.path.exists(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\scriptne3.lua'):
            os.remove(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\scriptne3.lua')
        if os.path.exists(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\scriptne4.lua'):
            os.remove(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\scriptne4.lua')
        print ("Removed Old Script")
        if not os.path.exists(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec'):
            os.mkdir(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec')
    except:
        pass
    if not os.path.exists(autoexec1):
        os.mkdir(autoexec1)
        print ("Created Folder Update")
    filename = Path('scriptne3.lua')
    url = 'https://dangtapcode.xyz/luutru/scriptne3.lua'
    response = requests.get(url)
    filename.write_bytes(response.content)   
    print ("Downloaded scriptne3.lua")

# def downautoexec2():
#     try:
#         if os.path.exists(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\maru.txt'):
#             os.remove(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\maru.txt')
#         if os.path.exists(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\maru.lua'):
#             os.remove(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\maru.lua')
#         if os.path.exists(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\New Text Document.txt'):
#             os.remove(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\New Text Document.txt')
#         if os.path.exists(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\scriptne1.lua'):
#             os.remove(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\scriptne1.lua')
#         if os.path.exists(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\scriptne2.lua'):
#             os.remove(r'C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\scriptne2.lua')
#         print ("Removed Old Script")
#     except:
#         pass
#     if not os.path.exists(autoexec2):
#         os.mkdir(autoexec2)
#         print ("Created Folder Update")
#     filename = Path('scriptne4.lua')
#     url = 'https://dangtapcode.xyz/luutru/scriptne4.lua'
#     response = requests.get(url)
#     filename.write_bytes(response.content)   
#     print ("Downloaded scriptne4.lua")    
         
# def zipfile3():
#     try:
#          try:
#              print("link 1")
#              response = requests.get("https://dangtapcode.xyz/luutru/Fluxus.zip")
#          except:
#              print ("link 2")
#              response = requests.get("")
#     except OSError:
#         print('No connection to the server!')
#         return None
#     if response.status_code == 200:
#         print('Status 200, OK')
#         print ("Downloading")
#         open('Fluxus.zip', 'wb').write(response.content)
#         print ("Downloaded")
#         time.sleep(3)
#     else:
#         print('ZIP file request not successful!.')
#         return None
# def downzipfile3():
#     zipfile3()
#     print ("Unziping")
#     with zipfile.ZipFile('Fluxus.zip', 'r') as zip_ref:
#         zip_ref.extractall("C:\\Users\\Dang\\Desktop\\Fluxus\\Fluxus\\Fluxus")
#     print ("Unziped")

# def fulldownFluxus():  
#     time.sleep(1)
#     downzipfile3()
#     if not os.path.exists(updatefluxus):
#      os.mkdir(updatefluxus)  
#      print ("Created Folder Update")
     
def launch():
    if os.path.exists("C:\\setuphihi\\launch.exe"):
         os.remove("C:\\setuphihi\\launch.exe")
         print("Removed launch.exe")
    filename = Path('launch.exe')
    url = 'https://dangtapcode.xyz/luutru/launch.exe'
    response = requests.get(url)
    filename.write_bytes(response.content)  
    print ("Downloaded launch.exe")
    if not os.path.exists("C:\\Users\\Dang\\Desktop\\launchupdated"): 
     os.mkdir("C:\\Users\\Dang\\Desktop\\launchupdated") 
     print ("Created launchupdated")
     
# def quetrac():
#     filename = Path('cleartemp.bat')
#     url = 'https://dangtapcode.xyz/luutru/cleartemp.bat'
#     response = requests.get(url)
#     filename.write_bytes(response.content)  
#     print ("Downloaded cleartemp.bat")   

                                            
def fullcheck():    
    subprocess.call(["taskkill","/F","/IM","gs-auto-clicker-3.1.4-installer.exe"])
    subprocess.call(["taskkill","/F","/IM","Fluxus V7.exe"])
    subprocess.call(["taskkill","/F","/IM","launch.exe"])
    subprocess.call(["taskkill","/F","/IM","MacroRecorder.exe"])
    subprocess.call(["taskkill","/F","/IM","killfail.exe"])
    subprocess.call(["taskkill","/F","/IM","checktab.exe"])
    subprocess.call(["taskkill","/F","/IM","killrb.exe"])
    subprocess.call(["taskkill","/F","/IM","updatefluxus.exe"])
    if not os.path.exists("C:\\checkupdate\\startupdatemain.bat"):
        spmain() 
    # if not os.path.exists(verspmainreal):
    #     spmainreal()
    #     time.sleep(30)
    if not os.path.exists(checkmousekey):
        mousekey()
    if not os.path.exists(checkstartup):     
        startup()
    # if not os.path.exists("C:\\Users\\Dang\\Desktop\\fluupdate1"):
    #     fluxus()
        if not os.path.exists("C:\\Users\\Dang\\Desktop\\fluupdate"):
            os.mkdir("C:\\Users\\Dang\\Desktop\\fluupdate")
    # if not os.path.exists("C:\\Users\\Dang\\Downloads\\cleartemp.bat"):
    #     quetrac()
    # if not os.path.exists(updatefluxus):
    #     fulldownFluxus()
    if not os.path.exists("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\startlogin.bat"):
        start()
    if not os.path.exists("C:\\Users\\Dang\\Desktop\\Keyboard"):
        keyboard()    
    if not os.path.exists("C:\\Users\\Dang\\Desktop\\launchupdated"):
        launch()
    if not os.path.exists("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\AutoHotkey.exe"):
        setupclick1()
    if not os.path.exists("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\AutoMouseKey.exe"):
        setupclick2()
    if not os.path.exists("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\KeyPresser.exe"):
        setupclick3()
    if not os.path.exists("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\MouseClicker.exe"):
        setupclick4()
    if not os.path.exists("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\Read Me!!!.txt"):
        setupclick5()
    if not os.path.exists("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\ScheduledTasks.exe"):
        setupclick6()
    if not os.path.exists("C:\\Users\\Dang\\Documents\\Automatic Mouse and Keyboard\\Scripts\\login.amk"):
        script()
    if not os.path.exists(scriptmousekey):
        script2() 
    if not os.path.exists(autoexec1):
        downautoexec1() 
    # if not os.path.exists(autoexec2):
    #     downautoexec2() 
    # if not os.path.exists(robot_ver):
    #     clickconfig1()
    # if not os.path.exists(robot_ver1):
    #     clickconfig2()
    if not os.path.exists(updateconfigmousekey):
        fulldownconfigmouse()
    if not os.path.exists(cuttay_check):
        fulldowncuttay()
    if not os.path.exists(checktab_ktra):
        fulldownchecktab()
    if not os.path.exists("C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\Automatic Mouse and Keyboard\\TaskLog.txt"):
        clickconfig3()
    if not os.path.exists(checksetroblox_killfail):
        setroblox()    
    if not os.path.exists(checkgsclick):  
        gsclick()    
    if not os.path.exists(checknewlogin):
        newlogin()
    if not os.path.exists(updatekillfail):
        fulltdownkillfail()
        
def allautoclick():
    time.sleep(60)
    stu = os.path.exists("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\startlogin.bat")
    hotku = os.path.exists("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\AutoHotkey.exe")
    muki = os.path.exists("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\AutoMouseKey.exe")
    kires = os.path.exists("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\KeyPresser.exe")
    ritme = os.path.exists("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\Read Me!!!.txt")
    taks = os.path.exists("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\ScheduledTasks.exe")
    scrup = os.path.exists("C:\\Users\\Dang\\Documents\\Automatic Mouse and Keyboard\\Scripts\\login.amk")
    kubo = os.path.exists("C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\Automatic Mouse and Keyboard\\amk.ini")
    optu = os.path.exists("C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\Automatic Mouse and Keyboard\\PlayOptions.ini")
    tatlog = os.path.exists("C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\Automatic Mouse and Keyboard\\TaskLog.txt")
    mulick = os.path.exists("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\MouseClicker.exe")
    good = os.path.exists("C:\\Users\\Dang\\Documents\\Automatic Mouse and Keyboard\\Scripts\\good.amk")
    keybu = os.path.exists("C:\\Users\\Dang\\Desktop\\keyboard.exe")
    sero = os.path.exists("C:\\Users\\Dang\\Desktop\\KillFail\\setroblox.exe")  
    exec1 = os.path.exists("C:\\Users\\Dang\\AppData\\Local\\Packages\\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\\AC\\autoexec\\scriptne.txt")
    exec2 = os.path.exists("C:\\Users\\Dang\\AppData\\Local\\Packages\\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\\AC\\autoexec\\scriptne4.lua")
    if not stu:
      Path("C:\\checkupdate\\startlogin.bat").rename("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\startlogin.bat")
    if not hotku:
       Path("C:\\checkupdate\\AutoHotkey.exe").rename("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\AutoHotkey.exe")
    if not muki:
       Path("C:\\checkupdate\\AutoMouseKey.exe").rename("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\AutoMouseKey.exe")
    if not kires:
      Path("C:\\checkupdate\\KeyPresser.exe").rename("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\KeyPresser.exe")
    if not mulick:
     Path("C:\\checkupdate\\MouseClicker.exe").rename("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\MouseClicker.exe")
    if not ritme:
      Path("C:\\checkupdate\\Read Me!!!.txt").rename("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\Read Me!!!.txt")
    if not taks:
      Path("C:\\checkupdate\\ScheduledTasks.exe").rename("C:\\Users\\Dang\\Desktop\\AutoMouseKey 5.2.9.2\\ScheduledTasks.exe")
    if not scrup:
      Path("C:\\checkupdate\\login.amk").rename("C:\\Users\\Dang\\Documents\\Automatic Mouse and Keyboard\\Scripts\\login.amk")
    if not kubo:
     Path("C:\\checkupdate\\amk.ini").rename("C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\Automatic Mouse and Keyboard\\amk.ini")
    if not optu:
      Path("C:\\checkupdate\\PlayOptions.ini").rename("C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\Automatic Mouse and Keyboard\\PlayOptions.ini")
    if not tatlog:
     Path("C:\\checkupdate\\TaskLog.txt").rename("C:\\Users\\Dang\\AppData\\Roaming\\RobotSoft\\Automatic Mouse and Keyboard\\TaskLog.txt")
    if not good:
     Path("C:\\checkupdate\\good.amk").rename("C:\\Users\\Dang\\Documents\\Automatic Mouse and Keyboard\\Scripts\\good.amk")
    if not keybu:
     Path("C:\\checkupdate\\keyboard.exe").rename("C:\\Users\\Dang\\Desktop\\keyboard.exe")    
    if not sero:
     Path("C:\\checkupdate\\setroblox.exe").rename("C:\\Users\\Dang\\Desktop\\KillFail\\setroblox.exe")
    if not os.path.exists("C:\\Users\\Dang\\Desktop\\updatefluxus.exe"):
     Path("C:\\checkupdate\\updatefluxus.exe").rename("C:\\Users\\Dang\\Desktop\\updatefluxus.exe")   
    if not os.path.exists("C:\\setuphihi\\launch.exe"):
     Path("C:\\checkupdate\\launch.exe").rename("C:\\setuphihi\\launch.exe")   
    # if not os.path.exists("C:\\Users\\Dang\\Downloads\\cleartemp.bat"):
    #  Path("C:\\checkupdate\\cleartemp.bat").rename("C:\\Users\\Dang\\Downloads\\cleartemp.bat")   
    if not os.path.exists("C:\\Users\\Dang\\Desktop\\Fluxus\\Fluxus\\Fluxus\\Updated"):
        try:
            Path("C:\\Users\\Dang\\Desktop\\Fluxus\\Fluxus V7.exe").replace("C:\\Users\\Dang\\Desktop\\Fluxus\\Fluxus\\Fluxus\\Fluxus V7.exe")   
            print('thanh cong')
            os.mkdir("C:\\Users\\Dang\\Desktop\\Fluxus\\Fluxus\\Fluxus\\Updated")
        except:
            print('cong cc')
    if not exec1:
        try:
            # Path("C:\\checkupdate\\maru.lua").rename("C:\\Users\\Dang\\AppData\\Local\\Packages\\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\\AC\\autoexec\\maru.lua")
            maru = open(r"C:\checkupdate\scriptne3.lua", 'r').read()
            with open(r"C:\Users\Dang\AppData\Local\Packages\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\AC\autoexec\scriptne.txt", 'a') as f:
                f.write(maru)
                
        except:
            pass
    # if not exec2:
    #     try:
    #         Path("C:\\checkupdate\\scriptne4.lua").rename("C:\\Users\\Dang\\AppData\\Local\\Packages\\ROBLOXCORPORATION.ROBLOX_55nm5eh3cm0pr\\AC\\autoexec\\scriptne4.lua")
    #     except:
    #         pass
     
if not os.path.exists(newver):      
    fullcheck()
    allautoclick()
    print ("Updated")
    os.mkdir(newver)
    if os.path.exists("C:\\Users\\Dang\\Desktop\\fluxusrealupdate2"):
        os.removedirs("C:\\Users\\Dang\\Desktop\\fluxusrealupdate2")
        print('removed Fluxus Update')
    print("Created Update File")
    sleep(3)
    #restart pc
    os.system("shutdown /r /t 1")
    sleep(3)
    os.system('"C:\\Users\\Dang\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\startmac.bat"')
    os.system('"C:\\Users\\Dang\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\startkllfal.bat"')
    os.system('"C:\\Users\\Dang\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\openfluxus.bat"')
    os.system('"C:\\Users\\Dang\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\launch.bat"')
    os.system('"C:\\Users\\Dang\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\startuflu.bat"')
    print("Started Tool")
    subprocess.call(["taskkill","/F","/IM","Windows10Universal.exe"])
    print("CheckUpdate Closed")
    time.sleep(180)
if os.path.exists(newver):
    subprocess.call(["taskkill","/F","/IM","gs-auto-clicker-3.1.4-installer.exe"])
    subprocess.call(["taskkill","/F","/IM","MacroRecorder.exe"])
    print ("Update Roi Cha Noi Oi")
